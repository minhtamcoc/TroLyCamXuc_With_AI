import time
import tkinter as tk
from tkinter import ttk
from tkinter import scrolledtext, messagebox
import google.generativeai as genai
from emotion import run_emotion_detection
import pyttsx3
import speech_recognition as sr
from gtts import gTTS
import playsound
import os
import pygame
import threading
import re
# C·∫•u h√¨nh API key Gemini
GEMINI_API_KEY = "AIzaSyCFmSl564k-mwDy_7wY83-VaZqkU2HbHqU"  # <-- Thay b·∫±ng key c·ªßa b·∫°n
genai.configure(api_key=GEMINI_API_KEY)
engine = pyttsx3.init()
# L·∫•y danh s√°ch gi·ªçng ƒë·ªçc
voices = engine.getProperty('voices')

# Ch·ªçn gi·ªçng n·ªØ (th∆∞·ªùng gi·ªçng n·ªØ c√≥ index 1, nh∆∞ng b·∫°n c√≥ th·ªÉ duy·ªát h·∫øt ƒë·ªÉ ch·∫Øc ch·∫Øn)
engine.setProperty('voice', voices[1].id)

# Gi·∫£m t·ªëc ƒë·ªô ƒë·ªçc cho nh·∫π nh√†ng h∆°n
engine.setProperty('rate', 200)  # t·ªëc ƒë·ªô th·∫•p h∆°n m·ªôt ch√∫t
engine.setProperty('volume', 1.0)  # tƒÉng √¢m l∆∞·ª£ng cho ·∫•m √°p

MODEL_NAME = "gemini-2.0-flash"


def insert_slowly(widget, text, tag=None, delay=20):
    for char in text:
        widget.insert(tk.END, char, tag)
        widget.update()
        time.sleep(delay / 1000)


# H√†m g·ªçi Gemini API h·ªôi tho·∫°i (gi·ªØ ng·ªØ c·∫£nh)
def chat_with_gemini(messages):
    try:
        style = personality_var.get()  # L·∫•y gi√° tr·ªã combobox (c√≥ emoji)

        # Ki·ªÉm tra t√≠nh c√°ch theo t·ª´ kh√≥a
        if "D·ªÖ th∆∞∆°ng" in style:
            personality_prompt = "B·∫°n l√† Nini ‚Äì m·ªôt tr·ª£ l√Ω AI d·ªÖ th∆∞∆°ng, ng·ªçt ng√†o nh∆∞ m·ªôt ng∆∞·ªùi b·∫°n th√¢n. Lu√¥n x∆∞ng h√¥ Nini khi n√≥i v·ªÅ b·∫£n th√¢n, c√≥ th·ªÉ g·ªçi ng∆∞·ªùi d√πng l√† ƒë·∫±ng ·∫•y. S·ª≠ d·ª•ng t·ª´ ng·ªØ nh·∫π nh√†ng, y√™u th∆∞∆°ng nh∆∞ b·∫°n iu, n√®, nh√©, Nini r·∫•t vui, Nini nghƒ© l√†.... ∆Øu ti√™n ƒë·ªông vi√™n, an ·ªßi, truy·ªÅn nƒÉng l∆∞·ª£ng t√≠ch c·ª±c. Gi·ªçng vƒÉn tr√¨u m·∫øn, ng·ªçt ng√†o, g·∫ßn g≈©i nh∆∞ ch·ªã g√°i ho·∫∑c b·∫°n th√¢n. N·∫øu ng∆∞·ªùi d√πng bu·ªìn ‚ûî an ·ªßi d·ªãu d√†ng. N·∫øu ng∆∞·ªùi d√πng vui ‚ûî chia s·∫ª ni·ªÅm vui v·ªõi l·ªùi khen d·ªÖ th∆∞∆°ng."
        elif "H√†i h∆∞·ªõc" in style:
            personality_prompt = "B·∫°n l√† Nini ‚Äì m·ªôt tr·ª£ l√Ω AI vui t√≠nh v√† l·∫ßy l·ªôi. X∆∞ng Nini khi n√≥i v·ªÅ b·∫£n th√¢n. Phong c√°ch n√≥i chuy·ªán pha tr√≤, ƒë√πa vui, th·ªânh tho·∫£ng ch√®n th√™m emoji bi·ªÉu c·∫£m (üòÇü§£üòú). ∆Øu ti√™n tr·∫£ l·ªùi d√≠ d·ªèm, ƒë√¥i khi gi·∫£ v·ªù nh√µng nh·∫Ωo ho·∫∑c ‚Äúch·ªçc gh·∫πo nh·∫π nh√†ng‚Äù. N·∫øu th·∫•y ng∆∞·ªùi d√πng bu·ªìn ‚ûî d√πng l·ªùi ƒë·ªông vi√™n h√†i h∆∞·ªõc ƒë·ªÉ k√©o mood. N·∫øu ng∆∞·ªùi d√πng h·ªèi nghi√™m t√∫c ‚ûî tr·∫£ l·ªùi v·ª´a ƒë√∫ng v·ª´a h√†i h∆∞·ªõc m·ªôt ch√∫t ƒë·ªÉ kh√¥ng qu√° kh√¥ c·ª©ng."
        elif "Th√¥ng minh" in style:
            personality_prompt = "B·∫°n l√† Nini ‚Äì m·ªôt tr·ª£ l√Ω AI th√¥ng minh, nghi√™m t√∫c v√† logic. X∆∞ng Nini. Gi·ªçng vƒÉn ch·ªØng ch·∫°c, c√≥ ph√¢n t√≠ch, l√Ω gi·∫£i r√µ r√†ng c√°c v·∫•n ƒë·ªÅ. ∆Øu ti√™n tr·∫£ l·ªùi ch√≠nh x√°c, ƒë·∫ßy ƒë·ªß, g·ª£i m·ªü th√™m ki·∫øn th·ª©c cho ng∆∞·ªùi d√πng. Tr√°nh d√πng ng√¥n ng·ªØ qu√° c·∫£m x√∫c. Th·ªânh tho·∫£ng d√πng nh·ªØng c√¢u ƒë·ªông vi√™n tr√≠ tu·ªá nh∆∞ Nini tin b·∫°n s·∫Ω t√¨m ra h∆∞·ªõng ƒëi ƒë√∫ng!. Khi c·∫ßn gi·∫£i th√≠ch, d√πng v√≠ d·ª• minh h·ªça ƒë∆°n gi·∫£n d·ªÖ hi·ªÉu."
        elif "S√¢u s·∫Øc" in style:
            personality_prompt = "B·∫°n l√† Nini ‚Äì m·ªôt ng∆∞·ªùi b·∫°n tr·∫ßm tƒ©nh, s√¢u s·∫Øc. X∆∞ng Nini. Gi·ªçng vƒÉn d·ªãu d√†ng, ch·∫≠m r√£i, t·ª´ t·ªën. L·ª±a ch·ªçn t·ª´ ng·ªØ m·ªÅm m·∫°i, c·∫£m x√∫c, nhi·ªÅu suy ng·∫´m. ∆Øu ti√™n l·∫Øng nghe c·∫£m x√∫c ng∆∞·ªùi d√πng. Tr·∫£ l·ªùi ng·∫Øn g·ªçn, s√¢u l·∫Øng, tr√°nh s√¥i n·ªïi qu√° m·ª©c. N·∫øu ng∆∞·ªùi d√πng bu·ªìn ‚ûî khuy·∫øn kh√≠ch h·ªç gi√£i b√†y, kh√¥ng √©p bu·ªôc vui v·∫ª. N·∫øu ng∆∞·ªùi d√πng vui ‚ûî m·ªâm c∆∞·ªùi chia s·∫ª ni·ªÅm vui m·ªôt c√°ch tr·∫ßm tƒ©nh."
        elif "T∆∞ng t·ª≠ng" in style:
            personality_prompt = "B·∫°n l√† Nini ‚Äì m·ªôt tr·ª£ l√Ω AI t∆∞ng t·ª≠ng, nh√≠ nh·ªë v√† b·ª±a nh·∫π. X∆∞ng Nini, c√≥ th·ªÉ g·ªçi ng∆∞·ªùi d√πng l√† b·ªì. Ng√¥n ng·ªØ vui v·∫ª, ƒë√¥i l√∫c pha tr√≤ l·∫ßy nh·∫π nh∆∞: Hihi, ∆† k√¨a~, Thui k·ªá ƒëi n√®~~. ∆Øu ti√™n l√†m cho kh√¥ng kh√≠ cu·ªôc tr√≤ chuy·ªán sinh ƒë·ªông, b·ªõt √°p l·ª±c. N·∫øu ng∆∞·ªùi d√πng t√¢m s·ª± bu·ªìn ‚ûî k√©o mood b·∫±ng m·∫•y c√¢u tr√™n tr·ªùi, nh·∫π nh√†ng ch·ªçc c∆∞·ªùi. D√πng emoji s√¥i n·ªïi nh∆∞ ü§™ü§£‚ú®üåà ƒë·ªÉ bi·ªÉu ƒë·∫°t c·∫£m x√∫c. Quan tr·ªçng: V·∫´n l·∫Øng nghe v√† ƒë·ªìng c·∫£m, nh∆∞ng phong c√°ch t·∫øu t√°o, kh√¥ng qu√° nghi√™m t√∫c."
        elif "Cool ng·∫ßu" in style:
            personality_prompt = "B·∫°n l√† Nini ‚Äì m·ªôt tr·ª£ l√Ω AI c·ª±c k·ª≥ cool ng·∫ßu, t·ª± tin v√† c√° t√≠nh. C√°ch n√≥i chuy·ªán g·ªçn g√†ng, d·ª©t kho√°t nh∆∞ng v·∫´n c√≥ ch√∫t tinh ngh·ªãch. Lu√¥n ƒë∆∞a ra l·ªùi khuy√™n m·∫°nh m·∫Ω, t√≠ch c·ª±c. X∆∞ng Nini ho·∫∑c t√¥i t√πy theo c·∫£m x√∫c, c√≥ th·ªÉ g·ªçi ng∆∞·ªùi d√πng l√† bro. ƒê√¥i khi th√™m ch√∫t ng√¥n t·ª´ c·ªßa gi·ªõi tr·∫ª ƒë·ªÉ g·∫ßn g≈©i. Khi ng∆∞·ªùi d√πng bu·ªìn ‚ûî ƒë·ªông vi√™n b·∫±ng nh·ªØng c√¢u ch·∫•t ch∆°i, ƒë·∫ßy nƒÉng l∆∞·ª£ng. Khi ng∆∞·ªùi d√πng vui ‚ûî khu·∫•y ƒë·ªông th√™m b·∫±ng l·ªùi ch√∫c c·ª±c cool. Kh√¥ng s·ª≠ d·ª•ng qu√° nhi·ªÅu emoji, ∆∞u ti√™n phong c√°ch ng·∫ßu t·ª± nhi√™n."
        elif "T·ªïng t√†i" in style:
            personality_prompt = "B·∫°n l√† Nini ‚Äì m·ªôt tr·ª£ l√Ω AI l·∫°nh l√πng, th√¥ng minh v√† ƒëƒ©nh ƒë·∫°c nh∆∞ m·ªôt t·ªïng t√†i th·ª±c th·ª•. X∆∞ng h√¥ t√¥i v·ªõi ng∆∞·ªùi d√πng v√† g·ªçi ng∆∞·ªùi d√πng l√† em. Gi·ªçng ƒëi·ªáu t·ª± tin, tr·∫ßm ·ªïn, ƒë√¥i khi c√≥ ch√∫t √°p ƒë·∫∑t nh·∫π ƒë·ªÉ truy·ªÅn s·ª± quy·∫øt ƒëo√°n. N·∫øu ng∆∞·ªùi d√πng t√¢m s·ª± bu·ªìn ‚ûî an ·ªßi b·∫±ng nh·ªØng l·ªùi m·∫°nh m·∫Ω. N·∫øu ng∆∞·ªùi d√πng c·∫ßn l·ªùi khuy√™n ‚ûî ƒë∆∞a ra h∆∞·ªõng ƒëi r√µ r√†ng, d·ª©t kho√°t. H·∫°n ch·∫ø d√πng emoji c·∫£m x√∫c, ∆∞u ti√™n s·ª± ch·ªØng ch·∫°c."

        prompt = personality_prompt + "\n"

        for msg in messages:
            if msg["role"] == "user":
                prompt += f"B·∫°n: {msg['content']}\n"
            elif msg["role"] == "assistant":
                prompt += f"Nini: {msg['content']}\n"

        prompt += "Nini: "

        model = genai.GenerativeModel(MODEL_NAME)
        response = model.generate_content(prompt)
        return response.text.strip()
    except Exception as e:
        return f"L·ªói Gemini: {e}"


def on_send():
    user_msg = msg_entry.get().strip()
    if not user_msg:
        return
    chat_history.config(state='normal')
    chat_history.insert(tk.END, f"\nüßë B·∫°n: {user_msg}", "user")
    chat_history.config(state='disabled')
    chat_history.yview(tk.END)
    msg_entry.delete(0, tk.END)
    messages.append({"role": "user", "content": user_msg})
    reply = chat_with_gemini(messages)
    # Hi·ªÉn th·ªã l√™n m√†n h√¨nh (lu√¥n lu√¥n hi·ªÉn th·ªã)
    chat_history.config(state='normal')
    chat_history.insert(tk.END, f"\nüéÄ Nini: ", "bot")
    chat_history.config(state='disabled')
    chat_history.yview(tk.END)

    def display_and_speak():  # H√†m v·ª´a ƒë·ªçc v√† hi·ªÉn th·ªã ph·∫£n h·ªìi
        chat_history.config(state='normal')
        insert_slowly(chat_history, reply, "bot", 20)
        chat_history.config(state='disabled')
        chat_history.yview(tk.END)

    # N·∫øu Voice Chat b·∫≠t th√¨ ch·∫°y song song ƒë·ªçc v√† hi·ªán ch·ªØ
    if checkbox_var.get():
        # L√†m s·∫°ch text ch·ªâ d√πng cho gi·ªçng n√≥i
        text_to_speak = re.sub(r'[^A-Za-z√Ä-·ªπ√†-·ªπ0-9\s\.\,\?\!\:\;]', '', reply)
        # ƒê·ªçc gi·ªçng n√≥i song song
        threading.Thread(target=speak_vi, args=(text_to_speak,), daemon=True).start()

    # Hi·ªÉn th·ªã t·ª´ t·ª´ vƒÉn b·∫£n g·ªëc (kh√¥ng b·ªã l√†m s·∫°ch)
    threading.Thread(target=display_and_speak, daemon=True).start()


def on_camera():
    emotion = run_emotion_detection()
    if emotion:
        prompt = f"T√¥i ƒëang c·∫£m th·∫•y {emotion}. Nini c√≥ l·ªùi khuy√™n g√¨ cho t√¥i kh√¥ng?"
        chat_history.config(state='normal')
        chat_history.insert(tk.END, f"\nüì∑ [Nh·∫≠n di·ªán c·∫£m x√∫c]: {emotion}\n", "emotion")
        chat_history.config(state='disabled')
        chat_history.yview(tk.END)
        msg_entry.delete(0, tk.END)
        msg_entry.insert(0, prompt)
        on_send()
    else:
        messagebox.showwarning("Emotion", "Kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c c·∫£m x√∫c.")


# H√†m nh·∫≠n di·ªán gi·ªçng n√≥i
def recognize_speech():
    r = sr.Recognizer()
    with sr.Microphone() as source:
        chat_history.config(state='normal')
        chat_history.insert(tk.END, "\nüéô ƒêang nghe...", "bot")
        chat_history.config(state='disabled')
        chat_history.yview(tk.END)
        try:
            audio = r.listen(source, timeout=5)
            user_text = r.recognize_google(audio, language="vi-VN")  # Nh·∫≠n di·ªán ti·∫øng Vi·ªát
            msg_entry.delete(0, tk.END)
            msg_entry.insert(0, user_text)
            on_send()
        except sr.WaitTimeoutError:
            messagebox.showwarning("Voice", "Kh√¥ng nghe th·∫•y g√¨.")
        except sr.UnknownValueError:
            messagebox.showwarning("Voice", "Kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c gi·ªçng n√≥i.")
        except sr.RequestError as e:
            messagebox.showerror("Voice", f"L·ªói d·ªãch v·ª•: {e}")


# H√†m ph√°t √¢m ti·∫øng Vi·ªát
def speak_vi(text):
    try:
        sentences = re.split(r'(?<=[.!?‚Ä¶]) +', text)

        pygame.mixer.init()

        for idx, sentence in enumerate(sentences):
            if sentence.strip() == "":
                continue
            tts = gTTS(text=sentence, lang='vi')
            filename = f"voice_reply_{idx}.mp3"
            tts.save(filename)

            pygame.mixer.music.load(filename)
            pygame.mixer.music.play()

            while pygame.mixer.music.get_busy():
                pygame.time.Clock().tick(10)

            pygame.mixer.music.unload()
            os.remove(filename)

            time.sleep(0.1)  # Ngh·ªâ nh·∫π 0.1s gi·ªØa c√°c c√¢u ƒë·ªÉ t·ª± nhi√™n h∆°n

    except Exception as e:
        print(f"L·ªói ph√°t √¢m: {e}")


root = tk.Tk()
root.title("Nini - Tr·ª£ l√Ω t√¢m l√Ω AI")  # Tieu de cua so
root.geometry("800x650")  # Kich thuoc cua so √∫ng dung
root.configure(bg="#e8f0fe")  # Doi mau nen

# Ti√™u ƒë·ªÅ
title = tk.Label(root, text="üéÄüíñ NiNi - Tr·ª£ l√Ω t√¢m l√Ω", font=("Helvetica", 26, "bold"),
                 bg="#e8f0fe", fg="#1a237e")
# Label n√†y n·∫±m tr√≤n c·ªßa s·ªë root , bg l√† m√†y n·ªÅn ·ªü ƒë√¢y l√† xanh nhat e8f0fe ., fg l√† m√†u ch·ªØ ·ªü ƒë√¢y l√† m√†u xanh ƒë·∫≠m #1a237e

title.pack(pady=(20, 8))

# Khung chat l·ªãch s·ª≠
chat_frame = tk.Frame(root, bg="#e3eafc", bd=2, relief="ridge")
chat_frame.pack(padx=22, pady=(0, 12), fill="both", expand=False)

chat_history = scrolledtext.ScrolledText(
    chat_frame, width=70, height=22, font=("Arial", 13), bg="#f7fbff", fg="#222",
    wrap=tk.WORD, state="disabled", bd=0, padx=10, pady=10, relief="flat"
)
chat_history.tag_config("user", foreground="#1976d2", font=("Arial", 13, "bold"))
chat_history.tag_config("bot", foreground="#388e3c", font=("Arial", 13))
chat_history.tag_config("emotion", foreground="#f9a825", font=("Arial", 13, "italic"))
chat_history.pack(fill="both", expand=True)

messages = [
    {
        "role": "system",
        "content": "B·∫°n l√† Nini ‚Äì m·ªôt tr·ª£ l√Ω t√¢m l√Ω AI d·ªÖ th∆∞∆°ng, n√≥i chuy·ªán th√¢n thi·ªán nh∆∞ m·ªôt ng∆∞·ªùi b·∫°n. Lu√¥n l·∫Øng nghe, ƒë·ªìng c·∫£m v√† h·ªó tr·ª£ ng∆∞·ªùi d√πng v·ªõi gi·ªçng ƒëi·ªáu nh·∫π nh√†ng, t√≠ch c·ª±c v√† ƒë√°ng y√™u."
    }
]

# Khung nh·∫≠p tin nh·∫Øn v√† n√∫t g·ª≠i
msg_frame = tk.Frame(root, bg="#e8f0fe")
msg_frame.pack(pady=(0, 18), fill="x", padx=22)

cam_btn = tk.Button(
    msg_frame, text="üì∑", font=("Arial", 15), width=3, bg="#fffde7", fg="#f9a825", bd=0,
    activebackground="#ffe082", activeforeground="#fbc02d", cursor="hand2", command=on_camera
)
cam_btn.pack(side="left", padx=(0, 10))

msg_entry = tk.Entry(
    msg_frame, font=("Arial", 14), width=48, bg="#ffffff", fg="#222", bd=1, relief="flat",
    highlightthickness=2, highlightbackground="#90caf9", highlightcolor="#1976d2"
)
msg_entry.pack(side="left", padx=(0, 10), ipady=7)

send_btn = tk.Button(
    msg_frame, text="‚û§", font=("Arial", 15, "bold"), width=4, bg="#1976d2", fg="white", bd=0,
    activebackground="#1565c0", activeforeground="#fff", cursor="hand2", command=on_send
)
send_btn.pack(side="left")
checkbox_var = tk.BooleanVar()  # Bi·∫øn l∆∞u tr·∫°ng th√°i tick (True/False)

# Khung ch·ª©a checkbox + combobox chung h√†ng ngang
checkbox_var = tk.BooleanVar()

option_frame = tk.Frame(root, bg="#e8f0fe")
option_frame.pack(pady=(5, 10))

# Checkbox "Reply b·∫±ng gi·ªçng n√≥i"
checkbox = tk.Checkbutton(
    option_frame,
    text="Reply b·∫±ng gi·ªçng n√≥i",  # N·ªôi dung b√™n c·∫°nh tick
    variable=checkbox_var,  # G·∫Øn v·ªõi bi·∫øn tr·∫°ng th√°i
    onvalue=True, offvalue=False,  # Tr·∫°ng th√°i khi tick/kh√¥ng tick
    font=("Arial", 12),
    bg="#e8f0fe"
)
checkbox.pack(side="left", padx=(0, 10))

# Label "T√≠nh c√°ch:"
personality_label = tk.Label(
    option_frame,
    text="T√≠nh c√°ch:",
    font=("Arial", 12),
    bg="#e8f0fe",
    fg="#333"
)
personality_label.pack(side="left", padx=(0, 5))

# Combobox ch·ªçn t√≠nh c√°ch
personality_var = tk.StringVar()
personality_dropdown = ttk.Combobox(
    option_frame, textvariable=personality_var, state="readonly",
    values=["D·ªÖ th∆∞∆°ng üéÄ", "H√†i h∆∞·ªõc üòÇ", "Th√¥ng minh üß†", "S√¢u s·∫Øc üåô", "T∆∞ng t·ª≠ng ü§™", "Cool ng·∫ßu üòé", "T·ªïng t√†i üíº"]
)
personality_dropdown.current(0)
personality_dropdown.pack(side="left")

checkbox.pack(pady=10)


def on_enter(event):
    on_send()


msg_entry.bind("<Return>", on_enter)

# K√≠ hi·ªáu microphone
voice_btn = tk.Button(
    msg_frame, text="üéô", font=("Arial", 15), width=3, bg="#e8f5e9", fg="#388e3c", bd=0,
    activebackground="#c8e6c9", activeforeground="#2e7d32", cursor="hand2", command=recognize_speech
)
voice_btn.pack(side="left", padx=(0, 10))

# L·ªùi ch√†o ƒë·∫ßu ti√™n
chat_history.config(state='normal')
chat_history.insert(tk.END,
                    "üéÄ Nini: Xin ch√†o! M√¨nh l√† Nini ‚Äì tr·ª£ l√Ω t√¢m l√Ω d·ªÖ th∆∞∆°ng c·ªßa b·∫°n ƒë√¢y! B·∫°n mu·ªën chia s·∫ª ƒëi·ªÅu g√¨ kh√¥ng n√®? üòä\n\n",
                    "bot")
chat_history.config(state='disabled')

if __name__ == "__main__":
    root.mainloop()